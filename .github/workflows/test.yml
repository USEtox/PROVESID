name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inp    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'fast'
        type: choice
        options:
        - fast
        - unit
        - integration
        - all

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check src/ tests/

    - name: Run fast tests (unit + non-slow)
      if: github.event.inputs.test_type == 'fast' || github.event.inputs.test_type == ''
      run: |
        python run_tests.py --test-type fast --coverage --verbose

    - name: Run unit tests only
      if: github.event.inputs.test_type == 'unit'
      run: |
        python run_tests.py --test-type unit --coverage --verbose

    - name: Run integration tests only
      if: github.event.inputs.test_type == 'integration'
      run: |
        python run_tests.py --test-type integration --coverage --verbose

    - name: Run all tests
      if: github.event.inputs.test_type == 'all'
      run: |
        python run_tests.py --test-type all --coverage --verbose

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  api-specific-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        api: [pubchem, cas, chebi, opsin, nci]
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run ${{ matrix.api }} API tests
      run: |
        python run_tests.py --api ${{ matrix.api }} --verbose
      continue-on-error: true  # API tests might fail due to external dependencies

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      uses: tj-actions/bandit@v5.1
      with:
        options: "-r src/ -f json -o bandit-report.json"
        exit_zero: true

    - name: Upload Bandit scan results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  package-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Test package build
      run: |
        python -m pip install --upgrade pip build
        python -m build
        pip install dist/*.whl
        python -c "import provesid; print('Package import successful')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
